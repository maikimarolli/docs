(window.webpackJsonp=window.webpackJsonp||[]).push([[58],{112:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return p})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return u}));var a=n(2),r=n(6),i=(n(0),n(126)),s=n(132),o=n(133),l=(n(129),{title:"Endpoints"}),p={unversionedId:"beta_prescriptions_endpoints",id:"beta_prescriptions_endpoints",isDocsHomePage:!1,title:"Endpoints",description:"[1]//github.com/Leaf-Agriculture/Leaf-quickstart-Postman-collection",source:"@site/docs/beta_prescriptions_endpoints.md",permalink:"/docs/docs/beta_prescriptions_endpoints",editUrl:"https://github.com/Leaf-Agriculture/docs/tree/master/docs/beta_prescriptions_endpoints.md",sidebar:"docs",previous:{title:"Endpoints",permalink:"/docs/docs/beta_machines_endpoints"},next:{title:"Endpoints",permalink:"/docs/docs/beta_layers_endpoints"}},c=[{value:"About",id:"about",children:[]},{value:"Prescription (BETA)",id:"prescription-beta",children:[{value:"Prescription Resources",id:"prescription-resources",children:[]},{value:"Upload prescription to Raven Slingshot",id:"upload-prescription-to-raven-slingshot",children:[]},{value:"List prescriptions from Raven Slingshot",id:"list-prescriptions-from-raven-slingshot",children:[]},{value:"Upload prescription to Climate FieldView",id:"upload-prescription-to-climate-fieldview",children:[]},{value:"List prescriptions from John Deere",id:"list-prescriptions-from-john-deere",children:[]},{value:"Upload prescription to John Deere",id:"upload-prescription-to-john-deere",children:[]}]}],b={rightToc:c};function u(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},b,n,{components:t,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"about"},"About"),Object(i.b)("p",null,"All HTTP methods should be prepended by this service's endpoint:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{}),"https://api.withleaf.io/services/beta/prescriptions/api\n")),Object(i.b)("p",null,"See below the REST resources and their endpoints available in this service."),Object(i.b)("h2",{id:"prescription-beta"},"Prescription (BETA)"),Object(i.b)("h3",{id:"prescription-resources"},"Prescription Resources"),Object(i.b)("p",null,"This feature has the following endpoints available:"),Object(i.b)("table",null,Object(i.b)("thead",{parentName:"table"},Object(i.b)("tr",{parentName:"thead"},Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"),Object(i.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Endpoints"))),Object(i.b)("tbody",{parentName:"table"},Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("a",Object(a.a)({parentName:"td"},{href:"#upload-prescription-to-raven-slingshot"}),"Upload prescription to Raven Slingshot")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("span",{class:"badge badge--success"},"POST")," ",Object(i.b)("inlineCode",{parentName:"td"},"/users/{leafUserId}/ravenSlingshot"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("a",Object(a.a)({parentName:"td"},{href:"#list-prescriptions-from-raven-slingshot"}),"List prescriptions from Raven Slingshot")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"td"},"/users/{leafUserId}/ravenSlingshot"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("a",Object(a.a)({parentName:"td"},{href:"#upload-prescription-to-climate-fieldview"}),"Upload prescription to Climate FieldView")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("span",{class:"badge badge--success"},"POST")," ",Object(i.b)("inlineCode",{parentName:"td"},"/users/{leafUserId}/climateFieldView"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("a",Object(a.a)({parentName:"td"},{href:"#list-prescriptions-from-john-deere"}),"Lists prescriptions from John Deere")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"td"},"/users/{leafUserId}/johnDeere"))),Object(i.b)("tr",{parentName:"tbody"},Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("a",Object(a.a)({parentName:"td"},{href:"#upload-prescription-to-john-deere"}),"Upload prescription to John Deere")),Object(i.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(i.b)("span",{class:"badge badge--success"},"POST")," ",Object(i.b)("inlineCode",{parentName:"td"},"/users/{leafUserId}/johnDeere"))))),Object(i.b)("h3",{id:"upload-prescription-to-raven-slingshot"},"Upload prescription to Raven Slingshot"),Object(i.b)("p",null,"\xa0",Object(i.b)("span",{class:"badge badge--success"},"POST")," ",Object(i.b)("inlineCode",{parentName:"p"},"/users/{leafUserId}/ravenSlingshot")),Object(i.b)("p",null,"Upload a prescription using the Raven Slingshot credentials of the LeafUserId."),Object(i.b)("p",null,"The file to be uploaded needs to be .zip and contain one of each of the following file extension: shp, dbf, shx; and all files must have the same name. The zip file cannot contain subfolders."),Object(i.b)("h4",{id:"example"},"Example:"),Object(i.b)("p",null,"A zip file named \u201cprescription_rx_map\u201d, containing the following files:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"prescription_rx_map.shp"),Object(i.b)("li",{parentName:"ul"},"prescription_rx_map.dbf"),Object(i.b)("li",{parentName:"ul"},"prescription_rx_map.shx")),Object(i.b)(s.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(i.b)(o.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/beta/prescriptions/api/users/{leafUserId}/ravenSlingshot'\n\nconst headers = {\n  'Authorization': `Bearer ${TOKEN}`\n  'Content-Type': 'multipart/form-data'\n}\n\nconst form = new FormData()\nform.append('file', 'prescription_rx_map.zip')\n\naxios.post(endpoint, form, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(i.b)(o.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/beta/prescriptions/api/users/{leafUserId}/ravenSlingshot'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nfiles = {'file': open('prescription_rx_map.zip')}\n\nresponse = requests.post(endpoint, headers=headers, files=files)\nprint(response.json())\n"))),Object(i.b)(o.a,{value:"sh",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"curl -X POST \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    -F 'file=prescription_rx_map.zip' \\\n    'https://api.withleaf.io/services/beta/prescriptions/api/users/{leafUserId}/ravenSlingshot'\n")))),Object(i.b)("h4",{id:"response"},"Response"),Object(i.b)("p",null,"The response is json with the id of the file uploaded to the provider ."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "id": "str",\n  "name": "str"\n}\n')),Object(i.b)("h3",{id:"list-prescriptions-from-raven-slingshot"},"List prescriptions from Raven Slingshot"),Object(i.b)("p",null,"\xa0",Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"p"},"/users/{leafUserId}/ravenSlingshot")),Object(i.b)("p",null,"List the existing prescriptions available in the provider."),Object(i.b)(s.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(i.b)(o.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\nconst endpoint = 'https://api.withleaf.io/services/beta/prescriptions/api/users/{leafUserId}/ravenSlingshot'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(i.b)(o.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\nendpoint = 'https://api.withleaf.io/services/beta/prescriptions/api/users/{leafUserId}/ravenSlingshot'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers, json=data)\nprint(response.json())\n"))),Object(i.b)(o.a,{value:"sh",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/beta/prescriptions/api/users/{leafUserId}/ravenSlingshot'\n")))),Object(i.b)("h4",{id:"response-1"},"Response"),Object(i.b)("p",null,"A json array of prescriptions available in this provider "),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'[\n  {\n    "id": "str",\n    "name": "str"\n  },\n  {\n    "id": "str",\n    "name": "str"\n  }\n]\n')),Object(i.b)("h3",{id:"upload-prescription-to-climate-fieldview"},"Upload prescription to Climate FieldView"),Object(i.b)("p",null,"\xa0",Object(i.b)("span",{class:"badge badge--success"},"POST")," ",Object(i.b)("inlineCode",{parentName:"p"},"/users/{leafUserId}/climateFieldView")),Object(i.b)("p",null,"Upload a prescription using the Climate FieldView credentials of the LeafUserId."),Object(i.b)("p",null,"The file to be uploaded needs to be .zip and contain one of each of the following file extension: shp, dbf, shx; and all files must have the same name. The zip file cannot contain subfolders."),Object(i.b)("h4",{id:"example-1"},"Example:"),Object(i.b)("p",null,"A zip file named \u201cprescription_rx_map\u201d, containing the following files:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"prescription_rx_map.shp"),Object(i.b)("li",{parentName:"ul"},"prescription_rx_map.dbf"),Object(i.b)("li",{parentName:"ul"},"prescription_rx_map.shx")),Object(i.b)(s.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(i.b)(o.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/beta/prescriptions/api/users/{leafUserId}/climateFieldView'\n\nconst headers = {\n  'Authorization': `Bearer ${TOKEN}`\n  'Content-Type': 'multipart/form-data'\n}\n\nconst form = new FormData()\nform.append('file', 'prescription_rx_map.zip')\n\naxios.post(endpoint, form, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(i.b)(o.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/beta/prescriptions/api/users/{leafUserId}/climateFieldView'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nfiles = {'file': open('prescription_rx_map.zip')}\n\nresponse = requests.post(endpoint, headers=headers, files=files)\nprint(response.json())\n"))),Object(i.b)(o.a,{value:"sh",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"curl -X POST \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    -F 'file=prescription_rx_map.zip' \\\n    'https://api.withleaf.io/services/beta/prescriptions/api/users/{leafUserId}/climateFieldView'\n")))),Object(i.b)("h4",{id:"response-2"},"Response"),Object(i.b)("p",null,"The response is json with the id of the file uploaded to the provider."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "id": "str",\n  "name": "str"\n}\n')),Object(i.b)("h3",{id:"list-prescriptions-from-john-deere"},"List prescriptions from John Deere"),Object(i.b)("p",null,"\xa0",Object(i.b)("span",{class:"badge badge--success"},"GET")," ",Object(i.b)("inlineCode",{parentName:"p"},"/users/{leafUserId}/johnDeere")),Object(i.b)("p",null,"List the existing prescriptions available in the provider."),Object(i.b)("p",null,"There is a required request param called organizationId for this endpoint to work.\nThis property should be the id of the organization at JohnDeere."),Object(i.b)(s.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(i.b)(o.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\nconst endpoint = 'https://api.withleaf.io/services/beta/prescriptions/api/users/{leafUserId}/johnDeere?organizationId={organizationId}'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(i.b)(o.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\nendpoint = 'https://api.withleaf.io/services/beta/prescriptions/api/users/{leafUserId}/johnDeere?organizationId={organizationId}'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers, json=data)\nprint(response.json())\n"))),Object(i.b)(o.a,{value:"sh",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/beta/prescriptions/api/users/{leafUserId}/johnDeere?organizationId={organizationId}'\n")))),Object(i.b)("h4",{id:"response-3"},"Response"),Object(i.b)("p",null,"A json array of prescriptions available in this provider."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'[\n  {\n    "id": "str",\n    "name": "str"\n  },\n  {\n    "id": "str",\n    "name": "str"\n  }\n]\n')),Object(i.b)("h3",{id:"upload-prescription-to-john-deere"},"Upload prescription to John Deere"),Object(i.b)("p",null,"\xa0",Object(i.b)("span",{class:"badge badge--success"},"POST")," ",Object(i.b)("inlineCode",{parentName:"p"},"/users/{leafUserId}/johnDeere")),Object(i.b)("p",null,"Upload a prescription using the John Deere credentials of the LeafUserId."),Object(i.b)("p",null,"There is a required request param called organizationId for this endpoint to work.\nThis property should be the id of the organization at JohnDeere."),Object(i.b)("p",null,'The file to be uploaded needs to be .zip and have a folder called "Rx" containing one of each of the following file extension: shp, dbf, shx; and all files must have the same name. The zip file cannot contain subfolders.'),Object(i.b)("h4",{id:"example-2"},"Example:"),Object(i.b)("p",null,'A .zip file named \u201cprescription_rx_map\u201d, having a parent folder called "Rx", containing the following files:'),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Rx/",Object(i.b)("ul",{parentName:"li"},Object(i.b)("li",{parentName:"ul"},"prescription_rx_map.shp"),Object(i.b)("li",{parentName:"ul"},"prescription_rx_map.dbf"),Object(i.b)("li",{parentName:"ul"},"prescription_rx_map.shx")))),Object(i.b)(s.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(i.b)(o.a,{value:"js",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/beta/prescriptions/api/users/{leafUserId}/johnDeere?organizationId={organizationId}'\n\nconst headers = {\n  'Authorization': `Bearer ${TOKEN}`\n  'Content-Type': 'multipart/form-data'\n}\n\nconst form = new FormData()\nform.append('file', 'prescription_rx_map.zip')\n\naxios.post(endpoint, form, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(i.b)(o.a,{value:"py",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/beta/prescriptions/api/users/{leafUserId}/johnDeere?organizationId={organizationId}'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nfiles = {'file': open('prescription_rx_map.zip')}\n\nresponse = requests.post(endpoint, headers=headers, files=files)\nprint(response.json())\n"))),Object(i.b)(o.a,{value:"sh",mdxType:"TabItem"},Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-shell"}),"curl -X POST \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    -F 'file=prescription_rx_map.zip' \\\n    'https://api.withleaf.io/services/beta/prescriptions/api/users/{leafUserId}/johnDeere?organizationId={organizationId}'\n")))),Object(i.b)("h4",{id:"response-4"},"Response"),Object(i.b)("p",null,"The response is json with the id of the file uploaded to the provider."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-json"}),'{\n  "id": "str",\n  "name": "str"\n}\n')))}u.isMDXComponent=!0},126:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return h}));var a=n(0),r=n.n(a);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function s(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?s(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):s(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=r.a.createContext({}),c=function(e){var t=r.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},b=function(e){var t=c(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),b=c(n),d=a,h=b["".concat(s,".").concat(d)]||b[d]||u[d]||i;return n?r.a.createElement(h,o(o({ref:t},p),{},{components:n})):r.a.createElement(h,o({ref:t},p))}));function h(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,s=new Array(i);s[0]=d;var o={};for(var l in t)hasOwnProperty.call(t,l)&&(o[l]=t[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var p=2;p<i;p++)s[p]=n[p];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},127:function(e,t,n){"use strict";var a=n(0),r=n(20);t.a=function(){var e=Object(a.useContext)(r.a);if(null===e)throw new Error("Docusaurus context not provided");return e}},128:function(e,t,n){"use strict";function a(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=a(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}t.a=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=a(e))&&(r&&(r+=" "),r+=t);return r}},129:function(e,t,n){"use strict";n.d(t,"b",(function(){return i})),n.d(t,"a",(function(){return s}));var a=n(127),r=n(134);function i(){var e=Object(a.a)().siteConfig,t=(e=void 0===e?{}:e).baseUrl,n=void 0===t?"/":t,i=e.url;return{withBaseUrl:function(e,t){return function(e,t,n,a){var i=void 0===a?{}:a,s=i.forcePrependBaseUrl,o=void 0!==s&&s,l=i.absolute,p=void 0!==l&&l;if(!n)return n;if(n.startsWith("#"))return n;if(Object(r.b)(n))return n;if(o)return t+n;var c=!n.startsWith(t)?t+n.replace(/^\//,""):n;return p?e+c:c}(i,n,e,t)}}}function s(e,t){return void 0===t&&(t={}),(0,i().withBaseUrl)(e,t)}},130:function(e,t,n){"use strict";var a=n(0),r=Object(a.createContext)(void 0);t.a=r},131:function(e,t,n){"use strict";var a=n(0),r=n(130);t.a=function(){var e=Object(a.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},132:function(e,t,n){"use strict";var a=n(0),r=n.n(a),i=n(131),s=n(128),o=n(48),l=n.n(o),p=37,c=39;t.a=function(e){var t=e.block,n=e.children,o=e.defaultValue,b=e.values,u=e.groupId,d=Object(i.a)(),h=d.tabGroupChoices,O=d.setTabGroupChoices,f=Object(a.useState)(o),j=f[0],m=f[1],v=Object(a.useState)(!1),g=v[0],N=v[1];if(null!=u){var T=h[u];null!=T&&T!==j&&b.some((function(e){return e.value===T}))&&m(T)}var y=function(e){m(e),null!=u&&O(u,e)},x=[],w=function(e){e.metaKey||e.altKey||e.ctrlKey||N(!0)},_=function(){N(!1)};return Object(a.useEffect)((function(){window.addEventListener("keydown",w),window.addEventListener("mousedown",_)}),[]),r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(s.a)("tabs",{"tabs--block":t})},b.map((function(e){var t=e.value,n=e.label;return r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":j===t,className:Object(s.a)("tabs__item",l.a.tabItem,{"tabs__item--active":j===t}),style:g?{}:{outline:"none"},key:t,ref:function(e){return x.push(e)},onKeyDown:function(e){!function(e,t,n){switch(n.keyCode){case c:!function(e,t){var n=e.indexOf(t)+1;e[n]?e[n].focus():e[0].focus()}(e,t);break;case p:!function(e,t){var n=e.indexOf(t)-1;e[n]?e[n].focus():e[e.length-1].focus()}(e,t)}}(x,e.target,e),w(e)},onFocus:function(){return y(t)},onClick:function(){y(t),N(!1)},onPointerDown:function(){return N(!1)}},n)}))),r.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},a.Children.toArray(n).filter((function(e){return e.props.value===j}))[0]))}},133:function(e,t,n){"use strict";var a=n(0),r=n.n(a);t.a=function(e){return r.a.createElement("div",null,e.children)}},134:function(e,t,n){"use strict";function a(e){return!0===/^(\w*:|\/\/)/.test(e)}function r(e){return void 0!==e&&!a(e)}n.d(t,"b",(function(){return a})),n.d(t,"a",(function(){return r}))}}]);