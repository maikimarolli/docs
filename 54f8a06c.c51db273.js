(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{126:function(e,a,t){"use strict";t.d(a,"a",(function(){return o})),t.d(a,"b",(function(){return u}));var n=t(0),r=t.n(n);function s(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function l(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function b(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?l(Object(t),!0).forEach((function(a){s(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,r=function(e,a){if(null==e)return{};var t,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||(r[t]=e[t]);return r}(e,a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)t=s[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var d=r.a.createContext({}),c=function(e){var a=r.a.useContext(d),t=a;return e&&(t="function"==typeof e?e(a):b(b({},a),e)),t},o=function(e){var a=c(e.components);return r.a.createElement(d.Provider,{value:a},e.children)},p={inlineCode:"code",wrapper:function(e){var a=e.children;return r.a.createElement(r.a.Fragment,{},a)}},O=r.a.forwardRef((function(e,a){var t=e.components,n=e.mdxType,s=e.originalType,l=e.parentName,d=i(e,["components","mdxType","originalType","parentName"]),o=c(t),O=n,u=o["".concat(l,".").concat(O)]||o[O]||p[O]||s;return t?r.a.createElement(u,b(b({ref:a},d),{},{components:t})):r.a.createElement(u,b({ref:a},d))}));function u(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var s=t.length,l=new Array(s);l[0]=O;var b={};for(var i in a)hasOwnProperty.call(a,i)&&(b[i]=a[i]);b.originalType=e,b.mdxType="string"==typeof e?e:n,l[1]=b;for(var d=2;d<s;d++)l[d]=t[d];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,t)}O.displayName="MDXCreateElement"},127:function(e,a,t){"use strict";var n=t(0),r=t(20);a.a=function(){var e=Object(n.useContext)(r.a);if(null===e)throw new Error("Docusaurus context not provided");return e}},128:function(e,a,t){"use strict";function n(e){var a,t,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(a=0;a<e.length;a++)e[a]&&(t=n(e[a]))&&(r&&(r+=" "),r+=t);else for(a in e)e[a]&&(r&&(r+=" "),r+=a);return r}a.a=function(){for(var e,a,t=0,r="";t<arguments.length;)(e=arguments[t++])&&(a=n(e))&&(r&&(r+=" "),r+=a);return r}},129:function(e,a,t){"use strict";t.d(a,"b",(function(){return s})),t.d(a,"a",(function(){return l}));var n=t(127),r=t(134);function s(){var e=Object(n.a)().siteConfig,a=(e=void 0===e?{}:e).baseUrl,t=void 0===a?"/":a,s=e.url;return{withBaseUrl:function(e,a){return function(e,a,t,n){var s=void 0===n?{}:n,l=s.forcePrependBaseUrl,b=void 0!==l&&l,i=s.absolute,d=void 0!==i&&i;if(!t)return t;if(t.startsWith("#"))return t;if(Object(r.b)(t))return t;if(b)return a+t;var c=!t.startsWith(a)?a+t.replace(/^\//,""):t;return d?e+c:c}(s,t,e,a)}}}function l(e,a){return void 0===a&&(a={}),(0,s().withBaseUrl)(e,a)}},130:function(e,a,t){"use strict";var n=t(0),r=Object(n.createContext)(void 0);a.a=r},131:function(e,a,t){"use strict";var n=t(0),r=t(130);a.a=function(){var e=Object(n.useContext)(r.a);if(null==e)throw new Error("`useUserPreferencesContext` is used outside of `Layout` Component.");return e}},132:function(e,a,t){"use strict";var n=t(0),r=t.n(n),s=t(131),l=t(128),b=t(48),i=t.n(b),d=37,c=39;a.a=function(e){var a=e.block,t=e.children,b=e.defaultValue,o=e.values,p=e.groupId,O=Object(s.a)(),u=O.tabGroupChoices,j=O.setTabGroupChoices,m=Object(n.useState)(b),f=m[0],g=m[1],h=Object(n.useState)(!1),N=h[0],y=h[1];if(null!=p){var v=u[p];null!=v&&v!==f&&o.some((function(e){return e.value===v}))&&g(v)}var T=function(e){g(e),null!=p&&j(p,e)},I=[],U=function(e){e.metaKey||e.altKey||e.ctrlKey||y(!0)},w=function(){y(!1)};return Object(n.useEffect)((function(){window.addEventListener("keydown",U),window.addEventListener("mousedown",w)}),[]),r.a.createElement("div",null,r.a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:Object(l.a)("tabs",{"tabs--block":a})},o.map((function(e){var a=e.value,t=e.label;return r.a.createElement("li",{role:"tab",tabIndex:0,"aria-selected":f===a,className:Object(l.a)("tabs__item",i.a.tabItem,{"tabs__item--active":f===a}),style:N?{}:{outline:"none"},key:a,ref:function(e){return I.push(e)},onKeyDown:function(e){!function(e,a,t){switch(t.keyCode){case c:!function(e,a){var t=e.indexOf(a)+1;e[t]?e[t].focus():e[0].focus()}(e,a);break;case d:!function(e,a){var t=e.indexOf(a)-1;e[t]?e[t].focus():e[e.length-1].focus()}(e,a)}}(I,e.target,e),U(e)},onFocus:function(){return T(a)},onClick:function(){T(a),y(!1)},onPointerDown:function(){return y(!1)}},t)}))),r.a.createElement("div",{role:"tabpanel",className:"margin-vert--md"},n.Children.toArray(t).filter((function(e){return e.props.value===f}))[0]))}},133:function(e,a,t){"use strict";var n=t(0),r=t.n(n);a.a=function(e){return r.a.createElement("div",null,e.children)}},134:function(e,a,t){"use strict";function n(e){return!0===/^(\w*:|\/\/)/.test(e)}function r(e){return void 0!==e&&!n(e)}t.d(a,"b",(function(){return n})),t.d(a,"a",(function(){return r}))},79:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return d})),t.d(a,"metadata",(function(){return c})),t.d(a,"rightToc",(function(){return o})),t.d(a,"default",(function(){return O}));var n=t(2),r=t(6),s=(t(0),t(126)),l=t(132),b=t(133),i=t(129),d={title:"Endpoints"},c={unversionedId:"field_boundaries_endpoints",id:"field_boundaries_endpoints",isDocsHomePage:!1,title:"Endpoints",description:"About",source:"@site/docs/field_boundaries_endpoints.md",permalink:"/docs/docs/field_boundaries_endpoints",editUrl:"https://github.com/Leaf-Agriculture/docs/tree/master/docs/field_boundaries_endpoints.md",sidebar:"docs",previous:{title:"Overview",permalink:"/docs/docs/field_boundaries_overview"},next:{title:"Overview",permalink:"/docs/docs/operations_overview"}},o=[{value:"About",id:"about",children:[]},{value:"Endpoints",id:"endpoints",children:[{value:"Get all fields",id:"get-all-fields",children:[]},{value:"Get a field",id:"get-a-field",children:[]},{value:"Create a field",id:"create-a-field",children:[]},{value:"Update a Field",id:"update-a-field",children:[]},{value:"Get all operation files of a field (deprecated)",id:"get-all-operation-files-of-a-field-deprecated",children:[]},{value:"Response",id:"response-4",children:[]},{value:"Get all operation files of a field",id:"get-all-operation-files-of-a-field",children:[]},{value:"Response",id:"response-5",children:[]},{value:"Get an operation file of a field (deprecated)",id:"get-an-operation-file-of-a-field-deprecated",children:[]},{value:"Response",id:"response-6",children:[]},{value:"Get an operation file of a field",id:"get-an-operation-file-of-a-field",children:[]},{value:"Get Fields by geometry (deprecated)",id:"get-fields-by-geometry-deprecated",children:[]},{value:"Get Fields by geometry",id:"get-fields-by-geometry",children:[]},{value:"Get intersection of fields",id:"get-intersection-of-fields",children:[]},{value:"Delete a field",id:"delete-a-field",children:[]},{value:"Get all boundaries from field",id:"get-all-boundaries-from-field",children:[]},{value:"Get a boundary from field",id:"get-a-boundary-from-field",children:[]},{value:"Get active boundary from field",id:"get-active-boundary-from-field",children:[]},{value:"Update active boundary from field",id:"update-active-boundary-from-field",children:[]},{value:"Get all farms",id:"get-all-farms",children:[]},{value:"Get a farm",id:"get-a-farm",children:[]},{value:"Create a farm",id:"create-a-farm",children:[]},{value:"Update a farm",id:"update-a-farm",children:[]},{value:"Get all growers",id:"get-all-growers",children:[]},{value:"Get a grower",id:"get-a-grower",children:[]},{value:"Create a grower",id:"create-a-grower",children:[]},{value:"Update a grower",id:"update-a-grower",children:[]}]},{value:"REST Resources",id:"rest-resources",children:[{value:"Field Resource",id:"field-resource",children:[]},{value:"Boundary Resource",id:"boundary-resource",children:[]},{value:"Operation Resource",id:"operation-resource",children:[]},{value:"Farm Resource",id:"farm-resource",children:[]},{value:"Grower Resource",id:"grower-resource",children:[]}]}],p={rightToc:o};function O(e){var a=e.components,t=Object(r.a)(e,["components"]);return Object(s.b)("wrapper",Object(n.a)({},p,t,{components:a,mdxType:"MDXLayout"}),Object(s.b)("h2",{id:"about"},"About"),Object(s.b)("p",null,"Here we list all the available endpoints from Fields API. For easily\ncalling them, we recommend using ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"https://github.com/Leaf-Agriculture/Leaf-quickstart-Postman-collection"}),"Leaf's Postman collection"),"."),Object(s.b)("p",null,"All HTTP methods should be prepended by this service's endpoint:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{}),"https://api.withleaf.io/services/fields/api\n")),Object(s.b)("p",null,"There is a ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"#rest-resources"}),"REST resources")," section if you want to check it out."),Object(s.b)("p",null,"This service has the following endpoints available:"),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"),Object(s.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Endpoints"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-all-fields"}),"Get all fields")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"td"},"/fields"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-a-field"}),"Get a field")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"td"},"/users/{id}/fields/{id}"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#create-a-field"}),"Create a field")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--warning"},"POST")," ",Object(s.b)("inlineCode",{parentName:"td"},"/users/{id}/fields"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#update-a-field"}),"Update a field")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--warning"},"PATCH")," ",Object(s.b)("inlineCode",{parentName:"td"},"/users/{id}/fields/{id}"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-all-operation-files-of-a-field-deprecated"}),"Get all operation files of a field (deprecated)")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"td"},"/users/{leafUserId}/fields/{fieldId}/operations"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-all-operation-files-of-a-field"}),"Get all operation files of a field")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"td"},"/users/{leafUserId}/fields/{fieldId}/operations/files"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-an-operation-file-of-a-field-deprecated"}),"Get an operation file of a field (deprecated)")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"td"},"/users/{leafUserId}/fields/{fieldId}/operations/{fileId}"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-an-operation-file-of-a-field"}),"Get an operation file of a field")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"td"},"/users/{leafUserId}/fields/{fieldId}/operations/files/{fileId}"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-fields-by-geometry-deprecated"}),"Get fields by geometry (deprecated)")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--warning"},"POST")," ",Object(s.b)("inlineCode",{parentName:"td"},"/fields/query/intersects"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-fields-by-geometry"}),"Get fields by geometry")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--warning"},"POST")," ",Object(s.b)("inlineCode",{parentName:"td"},"/users/{leafUserId}/fields/intersects"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-intersection-of-fields"}),"Get intersection of fields")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--warning"},"POST")," ",Object(s.b)("inlineCode",{parentName:"td"},"/users/{id}/fields/intersect"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#delete-a-field"}),"Delete a field")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--danger"},"DELETE")," ",Object(s.b)("inlineCode",{parentName:"td"},"/users/{id}/fields/{id}"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-all-boundaries-from-field"}),"Get all boundaries from field")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"td"},"users/{leafUserId}/fields/{fieldId}/boundaries"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-a-boundary-from-field"}),"Get a boundary from field")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"td"},"users/{leafUserId}/fields/{fieldId}/boundaries/{boundaryId}"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-active-boundary-from-field"}),"Get active boundary from field")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"td"},"users/{leafUserId}/fields/{fieldId}/boundary"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#update-active-boundary-from-field"}),"Update active boundary from field")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--warning"},"PUT")," ",Object(s.b)("inlineCode",{parentName:"td"},"users/{leafUserId}/fields/{fieldId}/boundary"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-all-farms"}),"Get all farms")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"td"},"/farms"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-a-farm"}),"Get a farm")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"td"},"/users/{id}/farms/{id}"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#create-a-farm"}),"Create a farm")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--warning"},"POST")," ",Object(s.b)("inlineCode",{parentName:"td"},"/users/{leafUserId}/farms"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#update-a-farm"}),"Update a farm")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--warning"},"PUT")," ",Object(s.b)("inlineCode",{parentName:"td"},"/users/{leafUserId}/farms/{id}"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-all-growers"}),"Get all growers")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"td"},"/growers"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-a-grower"}),"Get a grower")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"td"},"/users/{leafUserId}/growers/{id}"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#create-a-grower"}),"Create a grower")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--warning"},"POST")," ",Object(s.b)("inlineCode",{parentName:"td"},"/users/{leafUserId}/growers"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#update-a-grower"}),"Update a grower")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--warning"},"PUT")," ",Object(s.b)("inlineCode",{parentName:"td"},"/users/{leafUserId}/growers/{id}"))))),Object(s.b)("h2",{id:"endpoints"},"Endpoints"),Object(s.b)("h3",{id:"get-all-fields"},"Get all fields"),Object(s.b)("p",null,"\xa0",Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"p"},"/fields")),Object(s.b)("p",null,"Gets a paged list of Fields. It is possible to filter the results by passing\nsome query parameters."),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"type"),", only matches fields with this type (string)."),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"farmId"),", only matches fields from this farmId (integer)."),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"provider"),", only matches fields from this provider (string)."),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"leafUserId"),", only matches fields from this user (string)."),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"page"),", an integer specifying the page being fetched."),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"size"),", an integer specifying the size of the page (defaults to 20).")),Object(s.b)("p",null,"These last two parameters are used exclusively for paging through results."),Object(s.b)("h4",{id:"response"},"Response"),Object(s.b)("p",null,"A JSON array containing Fields."),Object(s.b)(l.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"},{label:"JSON Response",value:"res"}],mdxType:"Tabs"},Object(s.b)(b.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/fields/api/fields'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(s.b)(b.a,{value:"py",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/fields/api/fields'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(s.b)(b.a,{value:"sh",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/fields/api/fields'\n"))),Object(s.b)(b.a,{value:"res",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'[\n  {\n    "id": "3031c20d-4331-4a24-bac0-c27087fc901f",\n    "name": "str",\n    "leafUserId": "5db46916-54a0-4b38-a9b1-d8e00673db63",\n    "providerName": "JohnDeere",\n    "providerFieldName": "Right side by the lake",\n    "providerId": 2,\n    "providerFieldId": "48926e0d-9bb7-4618-9214-3c2bf50d9ac2",\n    "providerBoundaryId": "5bfab976-df1b-44c7-ab83-ee5befdd45af",\n    "organizationId": "469039",\n    "type": "ORIGINAL",\n    "farmId": 1530952,\n    "geometry": {\n      "type": "MultiPolygon",\n      "coordinates": [\n        [\n          [\n            [\n                -48.62195051987687,\n                -27.35030179570155\n            ],\n            [\n                -48.62099028904954,\n                -27.351783623790567\n            ],\n            [\n                -48.61883379300156,\n                -27.349906320545184\n            ],\n            [\n                -48.619777930574806,\n                -27.34842446734229\n            ],\n            [\n                -48.62195051987687,\n                -27.35030179570155\n            ]\n          ]\n        ]\n      ]\n    }\n  }\n]\n')))),Object(s.b)("h3",{id:"get-a-field"},"Get a field"),Object(s.b)("p",null,"\xa0",Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"p"},"/users/{id}/fields/{id}")),Object(s.b)("p",null,"Gets a single Field by its id."),Object(s.b)("h4",{id:"response-1"},"Response"),Object(s.b)("p",null,"A single ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"#field-resource"}),"Field")," as a JSON object."),Object(s.b)(l.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(s.b)(b.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{id}'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(s.b)(b.a,{value:"py",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{id}'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(s.b)(b.a,{value:"sh",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{id}'\n")))),Object(s.b)("h3",{id:"create-a-field"},"Create a field"),Object(s.b)("p",null,"\xa0",Object(s.b)("span",{class:"badge badge--warning"},"POST")," ",Object(s.b)("inlineCode",{parentName:"p"},"/users/{leafUserId}/fields")),Object(s.b)("p",null,"Creates a Field for the user ",Object(s.b)("inlineCode",{parentName:"p"},"leafUserId"),". A request body must be provided\ncontaining the entry ",Object(s.b)("inlineCode",{parentName:"p"},'"geometry"')," object which need to have the properties ",Object(s.b)("inlineCode",{parentName:"p"},'"type"')," and ",Object(s.b)("inlineCode",{parentName:"p"},'"coordinates"'),".\nThe geometry represents the boundaries of the Field being created as a GeoJSON geometry\n(",Object(s.b)("inlineCode",{parentName:"p"},'"type"')," property must be a ",Object(s.b)("inlineCode",{parentName:"p"},'"MultiPolygon"'),")."),Object(s.b)("p",null,"Consider that you can also set the ",Object(s.b)("inlineCode",{parentName:"p"},"id")," and ",Object(s.b)("inlineCode",{parentName:"p"},"name")," properties (both of them optional) in the request body. If no ",Object(s.b)("inlineCode",{parentName:"p"},"id")," is provided\nan UUID will be generated and this property ",Object(s.b)("strong",{parentName:"p"},"can not")," be updated."),Object(s.b)("p",null,"Request body example:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "id": "string", // optional\n  "name": "string", // optional\n  "geometry": {\n    "type": "MultiPolygon",\n    "coordinates": [\n      [\n        [\n          [-93.48821327980518, 41.77137549568163],\n          [-93.48817333680519, 41.77143534378164],\n          [-93.48821327390516, 41.76068857977987],\n          [-93.48821327980518, 41.77137549568163]\n        ]\n      ]\n    ]\n  }\n}\n')),Object(s.b)("h4",{id:"response-2"},"Response"),Object(s.b)("p",null,"You can expect a response with a JSON Object containing the following properties."),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n    "id": "string",\n    "leafUserId": "string",\n    "area": {\n        "value": float,\n        "unit": "ha"\n    },\n    "boundaries": [\n        "UUID"\n    ],\n    "geometry": {\n        "type": "MultiPolygon",\n        "coordinates": [...]\n    },\n    "type": "string",\n    "createdTime": "timestamp",\n    "updatedTime": "timestamp"\n}\n')),Object(s.b)("p",null,"You can try some requests on the create fields API using the examples below."),Object(s.b)(l.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(s.b)(b.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\nconst data = {\n  geometry: {\n    type: \"MultiPolygon\",\n    coordinates: [...]\n  }\n}\n\naxios.post(endpoint, { headers, data })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(s.b)(b.a,{value:"py",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\ndata = {\n  'geometry': {\n    'type': \"MultiPolygon\",\n    'coordinates': [...]\n  }\n}\n\nresponse = requests.post(endpoint, headers=headers, json=data)\nprint(response.json())\n"))),Object(s.b)(b.a,{value:"sh",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),'curl -X POST \\\n    -H \'Authorization: Bearer YOUR_TOKEN\' \\\n    -d \'{ "geometry": { "type: "MultiPolygon", "coordinates": [...] } }\'\n    \'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/\'\n')))),Object(s.b)("h3",{id:"update-a-field"},"Update a Field"),Object(s.b)("p",null,"\xa0",Object(s.b)("span",{class:"badge badge--warning"},"PATCH")," ",Object(s.b)("inlineCode",{parentName:"p"},"/users/{leafUserId}/fields/{id}")),Object(s.b)("p",null,"Update the Field by ",Object(s.b)("inlineCode",{parentName:"p"},'"id"')," for the user ",Object(s.b)("inlineCode",{parentName:"p"},'"leafUserId"'),". The request body accepts updatable field properties like ",Object(s.b)("inlineCode",{parentName:"p"},'"name"')," to update the field name, ",Object(s.b)("inlineCode",{parentName:"p"},'"farmId"')," to update the related Farm of the Field and ",Object(s.b)("inlineCode",{parentName:"p"},'"geometry"'),", which represents the boundaries of the\nField as a GeoJSON geometry (it must be a ",Object(s.b)("inlineCode",{parentName:"p"},'"MultiPolygon"'),")."),Object(s.b)("p",null,"Request body example:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "name": "updatedName",\n  "farmId": 1,\n  "geometry": {\n    "type": "MultiPolygon",\n    "coordinates": [\n      [\n        [\n          [-93.48821327980518, 41.77137549568163],\n          [-93.48817333680519, 41.77143534378164],\n          [-93.48821327390516, 41.76068857977987],\n          [-93.48821327980518, 41.77137549568163]\n        ]\n      ]\n    ]\n  }\n}\n')),Object(s.b)("h4",{id:"response-3"},"Response"),Object(s.b)("p",null,"A ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"#field-resource"}),"Field")," as a JSON object."),Object(s.b)(l.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(s.b)(b.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{id}'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\nconst data = {\n  name: \"updatedName\",\n  farmId: 1,\n  geometry: {\n    type: \"MultiPolygon\",\n    coordinates: [\n      [-93.48821327980518, 41.77137549568163],\n      [-93.48817333680519, 41.77143534378164],\n      [-93.48821327390516, 41.76068857977987],\n      [-93.48821327980518, 41.77137549568163]\n    ]\n  }\n}\n\naxios.patch(endpoint, { headers, data })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(s.b)(b.a,{value:"py",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{id}'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\ndata = {\n  'name': 'updatedName',\n  'farmId': 1,\n  'geometry': {\n    'type': \"MultiPolygon\",\n    'coordinates': [\n      [-93.48821327980518, 41.77137549568163],\n      [-93.48817333680519, 41.77143534378164],\n      [-93.48821327390516, 41.76068857977987],\n      [-93.48821327980518, 41.77137549568163]\n    ]\n  }\n}\n\nresponse = requests.patch(endpoint, headers=headers, json=data)\nprint(response.json())\n"))),Object(s.b)(b.a,{value:"sh",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),'curl -X PATCH \\\n    -H \'Authorization: Bearer YOUR_TOKEN\' \\\n    -d \'{ "name": "updatedName", "farmId": 1, "geometry": { "type: "MultiPolygon", "coordinates": [...] } }\'\n    \'https://api.withleaf.io/services/fields/api/fields/users/{leafUserId}/{id}\'\n')))),Object(s.b)("h3",{id:"get-all-operation-files-of-a-field-deprecated"},"Get all operation files of a field (deprecated)"),Object(s.b)("p",null,"Use ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"#get-all-operation-files-of-a-field"}),"this endpoint")," instead"),Object(s.b)("p",null,"\xa0",Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"p"},"/users/{leafUserId}/fields/{fieldId}/operations")),Object(s.b)("p",null,"Gets a paged list of all operation files of the Field and Leaf User specified in\nthe URL."),Object(s.b)("p",null,"It is possible to filter the results by passing some query\nparameters. They are listed below."),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Parameter (to filter by)"),Object(s.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(s.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"operationType"),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'String "harvested", "planted", "applied" or "other"'),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"retrieve operations of given type")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"provider"),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'String "CNHI", "JohnDeere", "Trimble" or "ClimateFieldView"'),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"retrieve operations of given provider")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"origin"),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'String "provider", "automerged", "merged" or "uploaded"'),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"retrieve operations of given origin")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"crop"),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'String name of the crop, like "corn" or "soybeans". Entire crop list available ',Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"/docs/docs/crops"}),"here")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"retrieve operations with this crop.")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"startTime"),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ISO 8601 datetime format"),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"retrieve operations that started after this date")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"endTime"),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ISO 8601 datetime format"),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"retrieve operations that ended before this date")))),Object(s.b)("p",null,"You can also pass some parameters used exclusively for paging through results.\nThey are:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"page"),", an integer specifying the page being fetched (default is 0)"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"size"),", an integer specifying the size of the page (default is 20, max is 100)")),Object(s.b)("h4",{id:"request"},"Request"),Object(s.b)(l.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(s.b)(b.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/operations'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(s.b)(b.a,{value:"py",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/operations'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(s.b)(b.a,{value:"sh",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/operations'\n")))),Object(s.b)("h3",{id:"response-4"},"Response"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'[\n  {\n    "crops": [\n      "string"\n    ],\n    "endTime": "2022-05-11T13:11:57.994Z",\n    "id": "string",\n    "leafUserId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "operationType": "other",\n    "origin": "automerged",\n    "provider": "Other",\n    "providerFileId": "string",\n    "startTime": "2022-05-11T13:11:57.994Z",\n    "varieties": [\n      "string"\n    ]\n  }\n]\n')),Object(s.b)("h3",{id:"get-all-operation-files-of-a-field"},"Get all operation files of a field"),Object(s.b)("p",null,"\xa0",Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"p"},"/users/{leafUserId}/fields/{fieldId}/operations/files")),Object(s.b)("p",null,"Gets a paged list of all operation files of the Field and Leaf User specified in\nthe URL."),Object(s.b)("p",null,"It is possible to filter the results by passing some query\nparameters. They are listed below."),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Parameter (to filter by)"),Object(s.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(s.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"operationType"),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'String "harvested", "planted", "applied" or "other"'),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"retrieve operations of given type")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"provider"),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'String "CNHI", "JohnDeere", "Trimble" or "ClimateFieldView"'),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"retrieve operations of given provider")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"origin"),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'String "provider", "automerged", "merged" or "uploaded"'),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"retrieve operations of given origin")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"crop"),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),'String name of the crop, like "corn" or "soybeans". Entire crop list available ',Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"/docs/docs/crops"}),"here")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"retrieve operations with this crop.")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"startTime"),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ISO 8601 datetime format"),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"retrieve operations that started after this date")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"endTime"),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"ISO 8601 datetime format"),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"retrieve operations that ended before this date")))),Object(s.b)("p",null,"You can also pass some parameters used exclusively for paging through results.\nThey are:"),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"page"),", an integer specifying the page being fetched (default is 0)"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"size"),", an integer specifying the size of the page (default is 20, max is 100)")),Object(s.b)("h4",{id:"request-1"},"Request"),Object(s.b)(l.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(s.b)(b.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/operations/files'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(s.b)(b.a,{value:"py",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/operations/files'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(s.b)(b.a,{value:"sh",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/operations/files'\n")))),Object(s.b)("h3",{id:"response-5"},"Response"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'[\n  {\n    "crops": [\n      "string"\n    ],\n    "endTime": "2022-05-11T13:11:57.994Z",\n    "id": "string",\n    "leafUserId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "operationType": "other",\n    "origin": "automerged",\n    "provider": "Other",\n    "providerFileId": "string",\n    "startTime": "2022-05-11T13:11:57.994Z",\n    "varieties": [\n      "string"\n    ]\n  }\n]\n')),Object(s.b)("h3",{id:"get-an-operation-file-of-a-field-deprecated"},"Get an operation file of a field (deprecated)"),Object(s.b)("p",null,"Use ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"#get-an-operation-file-of-a-field"}),"this endpoint")," instead"),Object(s.b)("p",null,"\xa0",Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"p"},"/users/{leafUserId}/fields/{fieldId}/operations/{fileId}")),Object(s.b)("p",null,"Gets a single Operation File of a field by its id."),Object(s.b)("h4",{id:"request-2"},"Request"),Object(s.b)(l.a,{defaultValue:"sh",values:[{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"cURL",value:"sh"}],mdxType:"Tabs"},Object(s.b)(b.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/operations/{id}'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(s.b)(b.a,{value:"py",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/operations/{id}'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(s.b)(b.a,{value:"sh",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/operations/{id}'\n")))),Object(s.b)("h3",{id:"response-6"},"Response"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'[\n  {\n    "crops": [\n      "string"\n    ],\n    "endTime": "2022-05-11T13:11:57.994Z",\n    "id": "string",\n    "leafUserId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n    "operationType": "other",\n    "origin": "automerged",\n    "provider": "Other",\n    "providerFileId": "string",\n    "startTime": "2022-05-11T13:11:57.994Z",\n    "varieties": [\n      "string"\n    ]\n  }\n]\n')),Object(s.b)("h3",{id:"get-an-operation-file-of-a-field"},"Get an operation file of a field"),Object(s.b)("p",null,"\xa0",Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"p"},"/users/{leafUserId}/fields/{fieldId}/operations/files/{fileId}")),Object(s.b)("p",null,"Gets a single Operation File of a field by its id."),Object(s.b)("h4",{id:"response-7"},"Response"),Object(s.b)("p",null,"A single Operation File."),Object(s.b)(l.a,{defaultValue:"sh",values:[{label:"JavaScript",value:"js"},{label:"Python",value:"py"},{label:"cURL",value:"sh"}],mdxType:"Tabs"},Object(s.b)(b.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/operations/files/{id}'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(s.b)(b.a,{value:"py",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/operations/files/{id}'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(s.b)(b.a,{value:"sh",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/operations/files/{id}'\n")))),Object(s.b)("h4",{id:"response-8"},"Response"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "crops": [\n    "string"\n  ],\n  "endTime": "2022-05-11T13:13:01.548Z",\n  "id": "string",\n  "leafUserId": "3fa85f64-5717-4562-b3fc-2c963f66afa6",\n  "operationType": "other",\n  "origin": "automerged",\n  "provider": "Other",\n  "providerFileId": "string",\n  "startTime": "2022-05-11T13:13:01.548Z",\n  "varieties": [\n    "string"\n  ]\n}\n')),Object(s.b)("h3",{id:"get-fields-by-geometry-deprecated"},"Get Fields by geometry (deprecated)"),Object(s.b)("p",null,"\xa0",Object(s.b)("span",{class:"badge badge--warning"},"POST")," ",Object(s.b)("inlineCode",{parentName:"p"},"/fields/query/intersects")),Object(s.b)("p",null,"Use ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"#get-fields-by-geometry"}),"this endpoint")," instead."),Object(s.b)("p",null,"Gets a list of fields that intersect with the GeoJSON MultiPolygon sent in\nthe request body."),Object(s.b)("h4",{id:"response-9"},"Response"),Object(s.b)("p",null,"A JSON list of Fields."),Object(s.b)(l.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"},{label:"JSON sample response",value:"json"}],mdxType:"Tabs"},Object(s.b)(b.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/fields/api/fields/query/intersects'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\nconst data = {\n  geometry: {\n    type: \"MultiPolygon\",\n    coordinates: [...]\n  }\n}\n\naxios.post(endpoint, { headers, data })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(s.b)(b.a,{value:"py",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/fields/api/query/intersects'\nheaders = {'Authorization': 'Bearer YOUR_LEAF_TOKEN'}\n\ndata = {\n  'geometry': {\n    'type': \"MultiPolygon\",\n    'coordinates': [...]\n  }\n}\n\nresponse = requests.post(endpoint, headers=headers, json=data)\nprint(response.json())\n"))),Object(s.b)(b.a,{value:"sh",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),'curl -X POST \\\n    -H \'Authorization: Bearer YOUR_TOKEN\' \\\n    -d \'{ "geometry": { "type: "MultiPolygon", "geometry": [...] } }\'\n    \'https://api.withleaf.io/services/fields/api/fields/query/intersects\'\n'))),Object(s.b)(b.a,{value:"json",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),'[\n  {\n    "id": "id",\n    "leafUserId": "uuid",\n    "geometry": {\n      "type": "MultiPolygon",\n      "coordinates": [\n        [\n          [\n            [-89.84388470649719,39.71943436012731],\n            [-89.84392762184143,39.72439389620628],\n            [-89.83936786651611,39.725392361998416],\n            [-89.83928203582764,39.71951688444436],\n            [-89.84388470649719,39.71943436012731]\n          ]\n        ]\n      ]\n    },\n    "type": "MERGED",\n    "sources": []\n  }\n]\n')))),Object(s.b)("h3",{id:"get-fields-by-geometry"},"Get Fields by geometry"),Object(s.b)("p",null,"\xa0",Object(s.b)("span",{class:"badge badge--warning"},"POST")," ",Object(s.b)("inlineCode",{parentName:"p"},"/users/{leafUserId}/fields/intersects")),Object(s.b)("p",null,"Gets a list of fields that intersect with the GeoJSON MultiPolygon sent in\nthe request body. The minimum intersection percentage is given by\n",Object(s.b)("inlineCode",{parentName:"p"},"intersectionThreshold")," and can range from 0.01% to 100%, its default value is ",Object(s.b)("inlineCode",{parentName:"p"},"0.01"),"."),Object(s.b)("p",{align:"center"},Object(s.b)("img",{alt:"How it works",width:"75%",src:Object(i.a)("img/field_by_geometry.png")})),Object(s.b)("p",null,"The ",Object(s.b)("inlineCode",{parentName:"p"},"intersectionThreshold"),' can be compared with the "intersection by field" ratio or the "intersection by geometry" ratio. Whichever is satisfied first.'),Object(s.b)("p",null,"Here we have a sample for a field with 100 area unit and a geometry with 10 area unit:  "),Object(s.b)("p",{align:"center"},Object(s.b)("img",{alt:"How it works",width:"35%",src:Object(i.a)("img/field_by_geometry_intersectionThreshold.png")})),Object(s.b)("p",null,"So, in this case, if the ",Object(s.b)("inlineCode",{parentName:"p"},"intersectionThreshold")," were 3, then the condition would be satisfied and the field would be returned, but if the value was greater than 50, then it would not satisfy the condition, as 50% is the highest intersection value:"),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"intersectionThreshold (%)"),Object(s.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"satisfied"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"3"),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"\u2705")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"5"),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"\u2705")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"37"),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"\u2705")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"50"),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"\u2705")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"75"),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"\u274c")),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"100"),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"\u274c")))),Object(s.b)("h4",{id:"response-10"},"Response"),Object(s.b)("p",null,"A JSON list of Fields."),Object(s.b)(l.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"},{label:"JSON sample response",value:"json"}],mdxType:"Tabs"},Object(s.b)(b.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/intersects'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\nconst data = {\n  geometry: {\n    type: \"MultiPolygon\",\n    coordinates: [...]\n  },\n  'intersectionThreshold': 25.7\n}\n\naxios.post(endpoint, { headers, data })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(s.b)(b.a,{value:"py",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/intersects'\nheaders = {'Authorization': 'Bearer YOUR_LEAF_TOKEN'}\n\ndata = {\n  'geometry': {\n    'type': \"MultiPolygon\",\n    'coordinates': [...]\n  },\n  'intersectionThreshold': 25.7\n}\n\nresponse = requests.post(endpoint, headers=headers, json=data)\nprint(response.json())\n"))),Object(s.b)(b.a,{value:"sh",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),'curl -X POST \\\n    -H \'Authorization: Bearer YOUR_TOKEN\' \\\n    -d \'{ "geometry": { "type: "MultiPolygon", "coordinates": [...] }, "intersectionThreshold": 25.7 }\'\n    \'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/intersects\'\n'))),Object(s.b)(b.a,{value:"json",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),'[\n  {\n    "id": "id",\n    "leafUserId": "uuid",\n    "geometry": {\n      "type": "MultiPolygon",\n      "coordinates": [\n        [\n          [\n            [-89.84388470649719,39.71943436012731],\n            [-89.84392762184143,39.72439389620628],\n            [-89.83936786651611,39.725392361998416],\n            [-89.83928203582764,39.71951688444436],\n            [-89.84388470649719,39.71943436012731]\n          ]\n        ]\n      ]\n    },\n    "type": "MERGED",\n    "sources": []\n  }\n]\n')))),Object(s.b)("h3",{id:"get-intersection-of-fields"},"Get intersection of fields"),Object(s.b)("p",null,"\xa0",Object(s.b)("span",{class:"badge badge--warning"},"POST")," ",Object(s.b)("inlineCode",{parentName:"p"},"/users/{id}/fields/intersect")),Object(s.b)("p",null,"Gets a GeoJSON MultiPolygon corresponding to the intersection of the Fields\nspecified by the given id's. Such Field id's goes in a list, in the request\nbody."),Object(s.b)("h4",{id:"response-11"},"Response"),Object(s.b)("p",null,"A JSON in the format of a GeoJSON geometry."),Object(s.b)(l.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"},{label:"JSON sample response",value:"json"}],mdxType:"Tabs"},Object(s.b)(b.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"var axios = require('axios');\nvar data = JSON.stringify([\"id1\",\"id2\"]);\n\nvar config = {\n  method: 'post',\n  url: 'https://api.withleaf.io/services/fields/api/users/{id}/fields/intersect',\n  headers: {\n    'Authorization': 'Bearer YOUR_LEAF_TOKEN',\n    'Content-Type': 'application/json'\n  },\n  data : data\n};\n\naxios(config)\n.then(function (response) {\n  console.log(JSON.stringify(response.data));\n})\n.catch(function (error) {\n  console.log(error);\n});\n"))),Object(s.b)(b.a,{value:"py",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),'import requests\n\nurl = "https://api.withleaf.io/services/fields/api/users/{id}/fields/intersect"\n\npayload = "[\\"id1\\", \\"id2\\"]"\nheaders = {\n  \'Authorization\': \'Bearer YOUR_LEAF_TOKEN\',\n  \'Content-Type\': \'application/json\'\n}\n\nresponse = requests.request("POST", url, headers=headers, data = payload)\n'))),Object(s.b)(b.a,{value:"sh",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl --location --request \\\nPOST 'https://api.withleaf.io/services/fields/api/users/{id}/fields/intersect' \\\n--header 'Authorization: Bearer YOUR_LEAF_TOKEN' \\\n--header 'Content-Type: application/json' \\\n--data-raw '[\"id1\", \"id2\"]'\n"))),Object(s.b)(b.a,{value:"json",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n    "type": "MultiPolygon",\n    "coordinates": [\n        [\n            [\n                [-89.84388470649719,39.71943436012731],\n                [-89.84392762184143,39.72439389620628],\n                [-89.83936786651611,39.725392361998416],\n                [-89.83928203582764,39.71951688444436],\n                [-89.84388470649719,39.71943436012731]\n            ]\n        ]\n    ]\n}\n')))),Object(s.b)("h3",{id:"delete-a-field"},"Delete a field"),Object(s.b)("p",null,"\xa0",Object(s.b)("span",{class:"badge badge--danger"},"DELETE")," ",Object(s.b)("inlineCode",{parentName:"p"},"/users/{id}/fields/{id}")),Object(s.b)("p",null,"Deletes the field with the given id."),Object(s.b)("h3",{id:"get-all-boundaries-from-field"},"Get all boundaries from field"),Object(s.b)("p",null,"\xa0",Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"p"},"/users/{leafUserId}/fields/{fieldId}/boundaries")),Object(s.b)("p",null,"Gets a list of boundaries from a field."),Object(s.b)("h4",{id:"response-12"},"Response"),Object(s.b)("p",null,"A list of ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"#boundary-resource"}),"Boundary")," as a JSON object."),Object(s.b)(l.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(s.b)(b.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{id}/boundaries'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(s.b)(b.a,{value:"py",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{id}/boundaries'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(s.b)(b.a,{value:"sh",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{id}/boundaries'\n"))),Object(s.b)(b.a,{value:"res",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'[\n    {\n        "id": "90060545-d448-493a-965f-625a17916067",\n        "status": "ACTIVE",\n        "geometry": {\n            "type": "MultiPolygon",\n            "coordinates": [\n                [\n                    [\n                        [\n                            -89.84392762184143,\n                            39.72439389620628\n                        ],\n                        [\n                            -89.84388470649719,\n                            39.71943436012731\n                        ],\n                        [\n                            -89.83928203582764,\n                            39.71951688444436\n                        ],\n                        [\n                            -89.83936786651611,\n                            39.725392361998416\n                        ],\n                        [\n                            -89.84392762184143,\n                            39.72439389620628\n                        ]\n                    ]\n                ]\n            ]\n        },\n        "area": {\n            "value": 23.659422807502747,\n            "unit": "ha"\n        }\n    }\n]\n')))),Object(s.b)("h3",{id:"get-a-boundary-from-field"},"Get a boundary from field"),Object(s.b)("p",null,"\xa0",Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"p"},"/users/{leafUserId}/fields/{fieldId}/boundaries/{boundaryId}")),Object(s.b)("p",null,"Gets a single Boundary from a field by its id."),Object(s.b)("h4",{id:"response-13"},"Response"),Object(s.b)("p",null,"A single ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"#boundary-resource"}),"Boundary")," as a JSON object."),Object(s.b)(l.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(s.b)(b.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/boundaries/{boundaryId}'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(s.b)(b.a,{value:"py",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/boundaries/{boundaryId}'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(s.b)(b.a,{value:"sh",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/boundaries/{boundaryId}'\n")))),Object(s.b)("h3",{id:"get-active-boundary-from-field"},"Get active boundary from field"),Object(s.b)("p",null,"\xa0",Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"p"},"/users/{leafUserId}/fields/{fieldId}/boundary")),Object(s.b)("p",null,"Gets the active Boundary from a field."),Object(s.b)("h4",{id:"response-14"},"Response"),Object(s.b)("p",null,"A single ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"#boundary-resource"}),"Boundary")," as a JSON object."),Object(s.b)(l.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(s.b)(b.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/boundary'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(s.b)(b.a,{value:"py",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/boundary'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(s.b)(b.a,{value:"sh",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/boundary'\n")))),Object(s.b)("h3",{id:"update-active-boundary-from-field"},"Update active boundary from field"),Object(s.b)("p",null,"\xa0",Object(s.b)("span",{class:"badge badge--warning"},"PUT")," ",Object(s.b)("inlineCode",{parentName:"p"},"/users/{leafUserId}/fields/{fieldId}/boundary")),Object(s.b)("p",null,"Updates the active boundary of field ",Object(s.b)("inlineCode",{parentName:"p"},"fieldId"),". The previous active boundary is not deleted, but set as inactive."),Object(s.b)("p",null,"Request body example:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "geometry": {\n    "type": "MultiPolygon",\n    "coordinates": [\n      [\n        [\n          [-93.48821327980518, 41.77137549568163],\n          [-93.48817333680519, 41.77143534378164],\n          [-93.48821327390516, 41.76068857977987],\n          [-93.48821327980518, 41.77137549568163]\n        ]\n      ]\n    ]\n  }\n}\n')),Object(s.b)("h4",{id:"response-15"},"Response"),Object(s.b)("p",null,"A Field as a JSON object."),Object(s.b)(l.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(s.b)(b.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/boundary'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\nconst data = {\n  geometry: {\n    type: \"MultiPolygon\",\n    coordinates: [...]\n  }\n}\n\naxios.put(endpoint, data, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(s.b)(b.a,{value:"py",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/boundary'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\ndata = {\n  'geometry': {\n    'type': \"MultiPolygon\",\n    'coordinates': [...]\n  }\n}\n\nresponse = requests.put(endpoint, headers=headers, json=data)\nprint(response.json())\n"))),Object(s.b)(b.a,{value:"sh",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),'curl -X PUT \\\n    -H \'Authorization: Bearer YOUR_TOKEN\' \\\n    -d \'{ "geometry": { "type: "MultiPolygon", "geometry": [...] } }\'\n    \'https://api.withleaf.io/services/fields/api/users/{leafUserId}/fields/{fieldId}/boundary\'\n')))),Object(s.b)("h3",{id:"get-all-farms"},"Get all farms"),Object(s.b)("p",null,"\xa0",Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"p"},"/farms")),Object(s.b)("p",null,"Gets a paged list of all farms. It is possible to pass some query parameters."),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"growerId"),", only matches Farms from this growerId (integer)"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"provider"),", only matches Farms from this provider (string)"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"leafUserId"),", only matches Farms from this Leaf User (UUID)"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"page"),", an integer specifying the page being fetched"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"size"),", an integer specifying the size of the page (defaults to 20)")),Object(s.b)("p",null,"The parameters are used exclusively for paging through results."),Object(s.b)("h4",{id:"response-16"},"Response"),Object(s.b)("p",null,"A JSON array containing farms."),Object(s.b)(l.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"},{label:"JSON Response",value:"res"}],mdxType:"Tabs"},Object(s.b)(b.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/fields/api/farms'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(s.b)(b.a,{value:"py",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/fields/api/farms'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(s.b)(b.a,{value:"sh",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/fields/api/farms'\n"))),Object(s.b)(b.a,{value:"res",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'[\n  {\n    "id": 1538766,\n    "name": "name",\n    "providerId": 2,\n    "providerName": "JohnDeere",\n    "providerFarmId": "00000000-0000-0000-0000-000000000000",\n    "leafUserId": "00000000-0000-0000-0000-000000000000",\n    "fieldIds": ["00000000-0000-0000-0000-000000000000"],\n    "growerId": 12345\n  }\n]\n')))),Object(s.b)("h3",{id:"get-a-farm"},"Get a farm"),Object(s.b)("p",null,"\xa0",Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"p"},"/users/{leafUserId}/farms/{id}")),Object(s.b)("p",null,"Gets a single farm by its ",Object(s.b)("inlineCode",{parentName:"p"},"id")," from the user ",Object(s.b)("inlineCode",{parentName:"p"},"leafUserId"),"."),Object(s.b)("h4",{id:"response-17"},"Response"),Object(s.b)("p",null,"A single ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"#farm-resource"}),"Farm")," as a JSON object."),Object(s.b)(l.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"},{label:"JSON Response",value:"res"}],mdxType:"Tabs"},Object(s.b)(b.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/farms/{id}'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(s.b)(b.a,{value:"py",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/farms/{id}'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(s.b)(b.a,{value:"sh",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/fields/api/users/{leafUserId}/farms/{id}'\n"))),Object(s.b)(b.a,{value:"res",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "id": 1551010,\n  "name": "name",\n  "providerName": "JohnDeere",\n  "providerFarmId": "00000000-0000-0000-0000-000000000000",\n  "leafUserId": "00000000-0000-0000-0000-000000000000",\n  "fieldIds": ["00000000-0000-0000-0000-000000000000"],\n  "growerId": 123\n}\n')))),Object(s.b)("h3",{id:"create-a-farm"},"Create a farm"),Object(s.b)("p",null,"\xa0",Object(s.b)("span",{class:"badge badge--warning"},"POST")," ",Object(s.b)("inlineCode",{parentName:"p"},"/users/{leafUserId}/farms")),Object(s.b)("p",null,"Creates a farm for the user ",Object(s.b)("inlineCode",{parentName:"p"},"leafUserId"),". It's possible to pass both the ",Object(s.b)("inlineCode",{parentName:"p"},"farmName")," and the ",Object(s.b)("inlineCode",{parentName:"p"},"growerId")," on the body of\nthe request."),Object(s.b)("p",null,"Request body example:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "name": "Farm 01",\n  "growerId": 123\n}\n')),Object(s.b)("h4",{id:"response-18"},"Response"),Object(s.b)("p",null,"A single ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"#farm-resource"}),"Farm")," as a JSON object."),Object(s.b)(l.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(s.b)(b.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/farms'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\nconst data = {\n  name: 'farmName',\n}\n\naxios.post(endpoint, data, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(s.b)(b.a,{value:"py",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/farms'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\ndata = {\n  'name': 'farmName',\n}\n\nresponse = requests.post(endpoint, json=data, headers=headers)\nprint(response.json())\n"))),Object(s.b)(b.a,{value:"sh",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X POST \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    -d '{ \"name\": \"farmName\" }'\n    'https://api.withleaf.io/services/fields/api/users/{leafUserId}/farms'\n")))),Object(s.b)("h3",{id:"update-a-farm"},"Update a farm"),Object(s.b)("p",null,"\xa0",Object(s.b)("span",{class:"badge badge--warning"},"PUT")," ",Object(s.b)("inlineCode",{parentName:"p"},"/users/{leafUserId}/farms/{id}")),Object(s.b)("p",null,"Updates the farm with id ",Object(s.b)("inlineCode",{parentName:"p"},"id")," for the user ",Object(s.b)("inlineCode",{parentName:"p"},"leafUserId"),". It's possible to pass both the ",Object(s.b)("inlineCode",{parentName:"p"},"farmName")," and the ",Object(s.b)("inlineCode",{parentName:"p"},"growerId"),"\non the body of the request."),Object(s.b)("p",null,"Request body example:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "name": "Updated Farm Name",\n  "growerId": 123\n}\n')),Object(s.b)("h4",{id:"response-19"},"Response"),Object(s.b)("p",null,"A single ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"#farm-resource"}),"Farm")," as a JSON object."),Object(s.b)(l.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(s.b)(b.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/farms/{id}'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\nconst data = {\n  name: 'newFarmName'\n}\n\naxios.put(endpoint, data, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(s.b)(b.a,{value:"py",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/farms/{id}'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\ndata = {\n  'name': 'newFarmName'\n}\n\nresponse = requests.put(endpoint, json=data, headers=headers)\nprint(response.json())\n"))),Object(s.b)(b.a,{value:"sh",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),'curl -X PUT \\\n    -H \'Authorization: Bearer YOUR_TOKEN\' \\\n    -d \'{ "name": "newFarmName", "growerId": "newGrowerId }\'\n    \'https://api.withleaf.io/services/fields/api/users/{leafUserId}/farms/{id}\'\n')))),Object(s.b)("h3",{id:"get-all-growers"},"Get all growers"),Object(s.b)("p",null,"\xa0",Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"p"},"/growers")),Object(s.b)("p",null,"Gets a paged list of all growers. Use the following parameters for paging\nthrough results."),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"provider"),", only matches Growers from this provider (string)"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"leafUserId"),", only matches Growers from this Leaf User (UUID)"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"page"),", an integer specifying the page being fetched"),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"size"),", an integer specifying the size of the page (defaults to 20)")),Object(s.b)("h4",{id:"response-20"},"Response"),Object(s.b)("p",null,"A JSON array containing growers."),Object(s.b)(l.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"},{label:"JSON Response",value:"res"}],mdxType:"Tabs"},Object(s.b)(b.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint ='https://api.withleaf.io/services/fields/api/growers'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(s.b)(b.a,{value:"py",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/fields/api/growers'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(s.b)(b.a,{value:"sh",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/fields/api/growers'\n"))),Object(s.b)(b.a,{value:"res",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'[\n  {\n    "id": 2345,\n    "leafUserId": "UUID",\n    "providerName": "str",\n    "providerOrganizationId": "str",\n    "providerCompanyId": "str",\n    "providerUserId": "str",\n    "providerGrowerId": "str",\n    "farmIds": [4534]\n  }\n]\n')))),Object(s.b)("h3",{id:"get-a-grower"},"Get a grower"),Object(s.b)("p",null,"\xa0",Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"p"},"/users/{leafUserId}/growers/{id}")),Object(s.b)("p",null,"Gets a single grower by its ",Object(s.b)("inlineCode",{parentName:"p"},"id")," from the user ",Object(s.b)("inlineCode",{parentName:"p"},"leafUserId"),"."),Object(s.b)("h4",{id:"response-21"},"Response"),Object(s.b)("p",null,"A single ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"#grower-resource"}),"Grower")," as a JSON object. In our system Growers are equivalent to John Deere Client. That been said, the\nattribute ",Object(s.b)("inlineCode",{parentName:"p"},"name")," comes directly from the Client's name for growers with John Deere as provider."),Object(s.b)(l.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"},{label:"JSON Response",value:"res"}],mdxType:"Tabs"},Object(s.b)(b.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserID}/growers/{id}'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\naxios.get(endpoint, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(s.b)(b.a,{value:"py",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserID}/growers/{id}'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\nresponse = requests.get(endpoint, headers=headers)\nprint(response.json())\n"))),Object(s.b)(b.a,{value:"sh",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X GET \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    'https://api.withleaf.io/services/fields/api/users/{leafUserId}/growers/{id}'\n"))),Object(s.b)(b.a,{value:"res",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "id": 2345,\n  "name": "str",\n  "leafUserId": "UUID",\n  "providerName": "str",\n  "providerOrganizationId": "str",\n  "providerCompanyId": "str",\n  "providerUserId": "str",\n  "providerGrowerId": "str",\n  "farmIds": [4534]\n}\n')))),Object(s.b)("h3",{id:"create-a-grower"},"Create a grower"),Object(s.b)("p",null,"\xa0",Object(s.b)("span",{class:"badge badge--warning"},"POST")," ",Object(s.b)("inlineCode",{parentName:"p"},"/users/{leafUserId}/growers")),Object(s.b)("p",null,"Creates a grower for the user ",Object(s.b)("inlineCode",{parentName:"p"},"leafUserId"),". It's possible to pass ",Object(s.b)("inlineCode",{parentName:"p"},"name")," on the body of the request."),Object(s.b)("p",null,"Request body example:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "name": "Example Grower Name"\n}\n')),Object(s.b)("h4",{id:"response-22"},"Response"),Object(s.b)("p",null,"A single ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"#grower-resource"}),"Grower")," as a JSON object."),Object(s.b)(l.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(s.b)(b.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/growers'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\nconst data = {\n  name: 'growerName'\n}\n\naxios.post(endpoint, data, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(s.b)(b.a,{value:"py",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/growers'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\ndata = {\n  'name': 'growerName'\n}\n\nresponse = requests.post(endpoint, json=data, headers=headers)\nprint(response.json())\n"))),Object(s.b)(b.a,{value:"sh",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X POST \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    -d '{ \"name\": \"growerName\" }'\n    'https://api.withleaf.io/services/fields/api/users/{leafUserId}/growers'\n")))),Object(s.b)("h3",{id:"update-a-grower"},"Update a grower"),Object(s.b)("p",null,"\xa0",Object(s.b)("span",{class:"badge badge--warning"},"PUT")," ",Object(s.b)("inlineCode",{parentName:"p"},"/users/{leafUserId}/growers/{id}")),Object(s.b)("p",null,"Updates the grower with id ",Object(s.b)("inlineCode",{parentName:"p"},"id")," for the user ",Object(s.b)("inlineCode",{parentName:"p"},"leafUserId"),". It's possible to pass only the ",Object(s.b)("inlineCode",{parentName:"p"},"name")," on the body of the request."),Object(s.b)("p",null,"Request body example:"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "name": "Updated Grower Name"\n}\n')),Object(s.b)("h4",{id:"response-23"},"Response"),Object(s.b)("p",null,"A single ",Object(s.b)("a",Object(n.a)({parentName:"p"},{href:"#grower-resource"}),"Grower")," as a JSON object."),Object(s.b)(l.a,{defaultValue:"sh",values:[{label:"cURL",value:"sh"},{label:"Python",value:"py"},{label:"JavaScript",value:"js"}],mdxType:"Tabs"},Object(s.b)(b.a,{value:"js",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"const axios = require('axios')\nconst TOKEN = 'YOUR_TOKEN'\n\nconst endpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/growers/{id}'\nconst headers = { 'Authorization': `Bearer ${TOKEN}` }\n\nconst data = {\n  name: 'newGrowerName'\n}\n\naxios.put(endpoint, data, { headers })\n    .then(res => console.log(res.data))\n    .catch(console.error)\n"))),Object(s.b)(b.a,{value:"py",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-py"}),"import requests\n\nTOKEN = 'YOUR_TOKEN'\n\nendpoint = 'https://api.withleaf.io/services/fields/api/users/{leafUserId}/growers/{id}'\nheaders = {'Authorization': f'Bearer {TOKEN}'}\n\ndata = {\n  'name': 'newGrowerName'\n}\n\nresponse = requests.put(endpoint, json=data, headers=headers)\nprint(response.json())\n"))),Object(s.b)(b.a,{value:"sh",mdxType:"TabItem"},Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-shell"}),"curl -X PUT \\\n    -H 'Authorization: Bearer YOUR_TOKEN' \\\n    -d '{ \"name\": \"newGrowerName\"}'\n    'https://api.withleaf.io/services/fields/api/users/{leafUserId}/growers/{id}'\n")))),Object(s.b)("h2",{id:"rest-resources"},"REST Resources"),Object(s.b)("p",null,"See below the REST resources and their endpoints."),Object(s.b)("h3",{id:"field-resource"},"Field Resource"),Object(s.b)("p",null,"A field might have one or neither of the following keys: "),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},'a "mergedFieldId" key or'),Object(s.b)("li",{parentName:"ul"},'a "sources" key')),Object(s.b)("p",null,"A Field will only have one of the previous keys if it is either a field that\nhas been merged with other one(s) or if it is a result of a merge. Leaf merges\nfields that have any sort of overlap. This makes it easier for you to query\noperations from a field by querying by the merged field. Because a field might\nexist in multiple providers, Leaf detects that and creates a single field that\nyou can query for - and you can still query by the individual fields too."),Object(s.b)("p",null,Object(s.b)("strong",{parentName:"p"},Object(s.b)("inlineCode",{parentName:"strong"},"geometry")," and ",Object(s.b)("inlineCode",{parentName:"strong"},"area")," are deprecated keys")," that contains the geometry of the active boundary and its area, respectively."),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "id": "UUID",\n  "providerName": "str",\n  "providerFieldName": "str",\n  "providerFieldId": "str",\n  "providerFieldName": "str",\n  "providerBoundaryId": "UUID",\n  "type": "ORIGINAL",\n  "leafUserId": "UUID",\n  "organizationId": "str",\n  "mergedFieldId": ["UUID"],\n  "files": ["UUID"],\n  "boundaries": ["UUID"],\n  "geometry": {\n    "type": "MultiPolygon",\n    "coordinates": [\n      [\n        [\n          [-93.48821327980518, 41.77137549568163],\n          [-93.48817333680519, 41.77143534378164],\n          [-93.48821327390516, 41.76068857977987],\n          [-93.48821327980518, 41.77137549568163]\n        ]\n      ]\n    ]\n  },\n  "area": {\n    "value": double,\n    "unit": "ha"\n  }\n}\n')),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"),Object(s.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Endpoints"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-all-fields"}),"Get all fields")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"td"},"/fields"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-a-field"}),"Get a field")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"td"},"/users/{id}/fields/{id}"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#create-a-field"}),"Create a field")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--warning"},"POST")," ",Object(s.b)("inlineCode",{parentName:"td"},"/users/{id}/fields"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-fields-by-geometry"}),"Get fields by geometry")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--warning"},"POST")," ",Object(s.b)("inlineCode",{parentName:"td"},"/fields/query/intersects"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-intersection-of-fields"}),"Get intersection of fields")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--warning"},"POST")," ",Object(s.b)("inlineCode",{parentName:"td"},"/users/{id}/fields/intersect"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#delete-a-field"}),"Delete a field")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--danger"},"DELETE")," ",Object(s.b)("inlineCode",{parentName:"td"},"/users/{id}/fields/{id}"))))),Object(s.b)("h3",{id:"boundary-resource"},"Boundary Resource"),Object(s.b)("p",null,"Every Field at Leaf can have 0 or many boundaries. Fields created via Leaf's endpoints must have at least one boundary. Only one boundary may be active, the others are inactive boundaries. Boundaries cannot be deleted or have its geometry updated. Every update generates a new Boundary, and Leaf keeps a history of all seen Boundaries."),Object(s.b)("p",null,"Each boundary has a ",Object(s.b)("inlineCode",{parentName:"p"},"status")," and ",Object(s.b)("inlineCode",{parentName:"p"},"providerStatus"),"."),Object(s.b)("ul",null,Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},Object(s.b)("inlineCode",{parentName:"p"},"status")," - Represents the current status of the boundary:"),Object(s.b)("ul",{parentName:"li"},Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"ACTIVE")," - If the boundary was created at Leaf, it is the active boundary. If it is from a provider,\nthis boundary exists at the provider and is the active boundary there."),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"INACTIVE")," - If the boundary was created at Leaf, it is an inactive boundary. If it is from a provider, this boundary exists at the provider and is inactive there."),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"OUTDATED_ON_PROVIDER")," - The boundary is from a provider. The boundary once existed on the provider exactly as it is in that boundary, but it was edited (e.g. has a new geometry but the same provider boundary id)."),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"DELETED_ON_PROVIDER")," - The boundary is from a provider. The boundary once existed on the provider, but it was deleted. The user won't find that boundary in the provider."))),Object(s.b)("li",{parentName:"ul"},Object(s.b)("p",{parentName:"li"},Object(s.b)("inlineCode",{parentName:"p"},"providerStatus")," - Is the status of the boundary on the provider."),Object(s.b)("ul",{parentName:"li"},Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"ACTIVE")," - The boundary is the active boundary in the provider."),Object(s.b)("li",{parentName:"ul"},Object(s.b)("inlineCode",{parentName:"li"},"INACTIVE")," - The boundary is inactive in the provider.")))),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"providerStatus"),", just like the geometry, is a static attribute. In case this attribute is changed at the provider, the boundary's ",Object(s.b)("inlineCode",{parentName:"p"},"status")," is updated and a new boundary is created with the updated ",Object(s.b)("inlineCode",{parentName:"p"},"providerStatus")," in order to maintain history."),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "id": "UUID",\n  "status": "ACTIVE",\n  "geometry": {\n    "type": "MultiPolygon",\n    "coordinates": [\n      [\n        [\n          [\n            -89.84392762184143,\n            39.72439389620628\n          ],\n          [\n            -89.84388470649719,\n            39.71943436012731\n          ],\n          [\n            -89.83928203582764,\n            39.71951688444436\n          ],\n          [\n            -89.83936786651611,\n            39.725392361998416\n          ],\n          [\n            -89.84392762184143,\n            39.72439389620628\n          ]\n        ]\n      ]\n    ]\n  },\n  "area": {\n    "value": double,\n    "unit": "ha"\n  }\n}\n')),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"),Object(s.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Endpoints"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-all-boundaries-from-field"}),"Get all boundaries from field")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"td"},"users/{leafUserId}/fields/{fieldId}/boundaries"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-a-boundary-from-field"}),"Get a boundary from field")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"td"},"users/{leafUserId}/fields/{fieldId}/boundaries/{boundaryId}"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-active-boundary-from-field"}),"Get active boundary from field")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"td"},"users/{leafUserId}/fields/{fieldId}/boundary"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#update-active-boundary-from-field"}),"Update active boundary from field")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--warning"},"PUT")," ",Object(s.b)("inlineCode",{parentName:"td"},"users/{leafUserId}/fields/{fieldId}/boundary"))))),Object(s.b)("h3",{id:"operation-resource"},"Operation Resource"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "id": "UUID",\n  "operationType": "harvested|planted|applied",\n  "startTime": "ISO date-time",\n  "endTime": "ISO date-time",\n  "crops": ["str"],\n  "varieties": ["str"],\n  "providerFileId": "str",\n  "provider": "Trimble",\n  "origin": "provider|merged|automerged|uploaded",\n  "leafUserId": "UUID"\n}\n')),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"),Object(s.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Endpoints"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-all-operation-files-of-a-field-deprecated"}),"Get all operations of a field (deprecated)")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"td"},"/users/{leafUserId}/fields/{fieldId}/operations"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-all-operation-files-of-a-field"}),"Get all operations of a field")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"td"},"/users/{leafUserId}/fields/{fieldId}/operations/files"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-an-operation-of-a-field-deprecated"}),"Get an operation of a field (deprecated)")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"td"},"/users/{leafUserId}/fields/{fieldId}/operations/{fileId}"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-an-operation-of-a-field"}),"Get an operation of a field")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"td"},"/users/{leafUserId}/fields/{fieldId}/operations/files/{fileId}"))))),Object(s.b)("h3",{id:"farm-resource"},"Farm Resource"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "id": "long",\n  "name": "str",\n  "providerName": "str",\n  "providerFarmName": "str",\n  "providerFarmId": "UUID",\n  "leafUserId": "UUID",\n  "growerId": "long",\n  "fieldIds": ["UUID"]\n}\n')),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"),Object(s.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Endpoints"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-all-farms"}),"Get all farms")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"td"},"/farms"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-a-farm"}),"Get a farm")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"td"},"/users/{id}/farms/{id}"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#create-a-farm"}),"Create a farm")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--warning"},"POST")," ",Object(s.b)("inlineCode",{parentName:"td"},"/users/{leafUserId}/farms"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#update-a-farm"}),"Update a farm")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--warning"},"PUT")," ",Object(s.b)("inlineCode",{parentName:"td"},"/users/{leafUserId}/farms/{id}"))))),Object(s.b)("h3",{id:"grower-resource"},"Grower Resource"),Object(s.b)("pre",null,Object(s.b)("code",Object(n.a)({parentName:"pre"},{className:"language-json"}),'{\n  "id": 2345,\n  "leafUserId": "UUID",\n  "providerName": "str",\n  "providerOrganizationId": "str",\n  "providerCompanyId": "str",\n  "providerUserId": "str",\n  "providerGrowerId": "str",\n  "farmIds": [4534]\n}\n')),Object(s.b)("table",null,Object(s.b)("thead",{parentName:"table"},Object(s.b)("tr",{parentName:"thead"},Object(s.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"),Object(s.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Endpoints"))),Object(s.b)("tbody",{parentName:"table"},Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-all-growers"}),"Get all growers")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"td"},"/growers"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#get-a-grower"}),"Get a grower")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--success"},"GET")," ",Object(s.b)("inlineCode",{parentName:"td"},"/growers/{id}"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#create-a-grower"}),"Create a grower")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--warning"},"POST")," ",Object(s.b)("inlineCode",{parentName:"td"},"/users/{leafUserId}/growers"))),Object(s.b)("tr",{parentName:"tbody"},Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("a",Object(n.a)({parentName:"td"},{href:"#update-a-grower"}),"Update a grower")),Object(s.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(s.b)("span",{class:"badge badge--warning"},"PUT")," ",Object(s.b)("inlineCode",{parentName:"td"},"/users/{leafUserId}/growers/{id}"))))))}O.isMDXComponent=!0}}]);